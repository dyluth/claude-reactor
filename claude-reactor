#!/bin/bash
#
# claude-reactor: A wrapper script to manage and connect to the interactive Claude Docker environment.
#
# This script intelligently handles the container lifecycle:
# - Builds the image if it doesn't exist (must be run from the project root for the first build).
# - Starts the container if it's stopped.
# - Attaches to the container if it's already running.
# - Creates the container on its first run.
# - Handles authentication by preferring an API key but allowing an interactive override.

set -e

# --- Configuration ---
IMAGE_NAME="claude-runner"
CONTAINER_NAME="claude-agent"

# --- Dependency Check ---
if ! command -v docker &> /dev/null; then
    echo "Error: Docker is not installed or not in your PATH. Please install Docker Desktop."
    exit 1
fi

# --- Image Build Check ---
# If the image doesn't exist, we must be in the project directory to build it.
if ! docker image inspect "$IMAGE_NAME" &> /dev/null; then
    echo "Docker image '$IMAGE_NAME' not found."
    if [ -f "Dockerfile" ]; then
        echo "Dockerfile found in current directory. Building the image..."
        docker build -t "$IMAGE_NAME" .
        if [ $? -ne 0 ]; then
            echo "Error: Docker build failed."
            exit 1
        fi
    else
        echo "Error: Dockerfile not found. Please run 'claude-shell' from the project root once to build the image."
        exit 1
    fi
fi

# --- Container Lifecycle Management ---
# Check if the container exists, regardless of its state (running or stopped)
if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
    # Container exists. Check if it's running.
    if docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        echo "Attaching to running container '${CONTAINER_NAME}'..."
    else
        # Container is stopped, so start it.
        echo "Starting stopped container '${CONTAINER_NAME}'..."
        docker start "$CONTAINER_NAME" > /dev/null
    fi
else
    # Container does not exist. Create and run it for the first time.
    echo "Creating and starting new container '${CONTAINER_NAME}'..."
    
    # Base arguments for the docker run command
    DOCKER_RUN_ARGS=(
        -d
        --name "$CONTAINER_NAME"
        -v "$(pwd):/app"
        -v "${HOME}/.kube:/root/.kube"
    )
    
    # Handle authentication method
    if [[ " $@ " =~ " --interactive-login " ]]; then
        echo "Forcing interactive UI login."
    elif [ -f "${HOME}/.env" ]; then
        echo "API key file found at ~/.env. Using API key authentication."
        DOCKER_RUN_ARGS+=("--env-file" "${HOME}/.env")
    else
        echo "No API key file found at ~/.env. Defaulting to interactive UI login."
    fi
    
    # Execute the run command
    docker run "${DOCKER_RUN_ARGS[@]}" "$IMAGE_NAME" > /dev/null
    
    if [ $? -ne 0 ]; then
        echo "Error: Failed to run container."
        exit 1
    fi
fi

# --- Attach to the Container ---
# By this point, the container is guaranteed to be running.
docker exec -it "$CONTAINER_NAME" /bin/bash