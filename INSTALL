#!/usr/bin/env bash

# INSTALL - Claude-Reactor Installation Script
# Professional installation system with automatic architecture detection

set -e

# Configuration
INSTALL_PATH="/usr/local/bin/claude-reactor"
LOCAL_INSTALL_PATH="$HOME/bin/claude-reactor"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DIST_DIR="$SCRIPT_DIR/dist"

# Colors for output
BLUE='\033[0;34m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Architecture detection (consistent with integration tests)
detect_architecture() {
    local arch_raw=$(uname -m)
    case "$arch_raw" in
        x86_64|amd64)
            echo "amd64"
            ;;
        arm64|aarch64)
            echo "arm64"
            ;;
        *)
            log_error "Unsupported architecture: $arch_raw"
            log_info "Supported architectures: x86_64, amd64, arm64, aarch64"
            exit 1
            ;;
    esac
}

# OS detection
detect_os() {
    local os_raw=$(uname -s | tr '[:upper:]' '[:lower:]')
    case "$os_raw" in
        linux)
            echo "linux"
            ;;
        darwin)
            echo "darwin"
            ;;
        *)
            log_error "Unsupported operating system: $os_raw"
            log_info "Supported operating systems: Linux, macOS (Darwin)"
            exit 1
            ;;
    esac
}

# Find the correct binary for current platform
find_binary() {
    local arch=$(detect_architecture)
    local os=$(detect_os)
    
    local binary_path="$DIST_DIR/claude-reactor-${os}-${arch}"
    
    if [[ -x "$binary_path" ]]; then
        echo "$binary_path"
        return 0
    fi
    
    log_error "Binary not found: $binary_path"
    log_info "Available binaries:"
    if [[ -d "$DIST_DIR" ]]; then
        ls -la "$DIST_DIR"/claude-reactor-* 2>/dev/null | sed 's/^/  /' || log_info "  No binaries found in dist/"
    else
        log_info "  dist/ directory does not exist"
    fi
    log_info ""
    log_info "To build the binary for your platform, run:"
    log_info "  make go-build-all"
    return 1
}

# Check if running with appropriate permissions
check_permissions() {
    local install_dir=$(dirname "$INSTALL_PATH")
    
    if [[ ! -w "$install_dir" ]]; then
        log_warning "Installation requires write permissions to $install_dir"
        log_info "You may need to run this script with sudo:"
        log_info "  sudo ./INSTALL"
        return 1
    fi
    
    return 0
}

# Copy file with proper error handling
copy_binary() {
    local source="$1"
    local destination="$2"
    local is_local_install="$3"
    
    log_info "Installing claude-reactor..."
    log_info "  Source: $source"
    log_info "  Target: $destination"
    
    # Create directory if it doesn't exist (for local install)
    if [[ "$is_local_install" == "true" ]]; then
        local dest_dir=$(dirname "$destination")
        if [[ ! -d "$dest_dir" ]]; then
            log_info "Creating directory: $dest_dir"
            mkdir -p "$dest_dir"
        fi
    fi
    
    if ! cp "$source" "$destination"; then
        log_error "Failed to copy binary to $destination"
        return 1
    fi
    
    if ! chmod +x "$destination"; then
        log_error "Failed to make binary executable"
        return 1
    fi
    
    # Handle macOS security issues
    if [[ "$(detect_os)" == "darwin" ]]; then
        log_info "Applying macOS security fixes..."
        
        # Remove quarantine attribute
        if command -v xattr >/dev/null 2>&1; then
            xattr -d com.apple.quarantine "$destination" 2>/dev/null || true
            xattr -c "$destination" 2>/dev/null || true  # Clear all extended attributes
            log_info "‚úÖ Extended attributes cleared"
        fi
        
        # Try to remove any other Gatekeeper restrictions
        if command -v spctl >/dev/null 2>&1; then
            spctl --add "$destination" 2>/dev/null || true
            log_info "‚úÖ Added to Gatekeeper whitelist"
        fi
        
        log_warning "‚ö†Ô∏è  macOS may still block unsigned binaries"
        log_info "If you get 'Killed: 9' errors, use the local install option:"
        log_info "  ./INSTALL --local"
    fi
    
    return 0
}

# Verify installation
verify_installation() {
    local install_path="${1:-$INSTALL_PATH}"
    
    if [[ ! -x "$install_path" ]]; then
        log_error "Installation verification failed: $install_path is not executable"
        return 1
    fi
    
    # Test that the binary runs
    if ! "$install_path" --version >/dev/null 2>&1; then
        local exit_code=$?
        if [[ $exit_code == 137 ]] && [[ "$(detect_os)" == "darwin" ]]; then
            log_warning "Binary killed by macOS security (SIGKILL)"
            log_info "üîê This is likely due to macOS Gatekeeper restrictions on /usr/local/bin"
            log_info ""
            log_info "üí° Recommended solution: Use local installation instead:"
            log_info "  1. Uninstall: ./INSTALL --uninstall"
            log_info "  2. Reinstall: ./INSTALL --local"
            log_info ""
            log_info "üîß Alternative fixes for system installation:"
            log_info "  1. Run: xattr -c $install_path"
            log_info "  2. Go to System Preferences ‚Üí Security & Privacy ‚Üí General"
            log_info "  3. Click 'Allow Anyway' for claude-reactor"
        else
            log_warning "Binary installed but --version check failed"
            log_info "This might be normal if version info is not set"
        fi
    fi
    
    return 0
}

# Uninstall function
uninstall() {
    log_info "Uninstalling claude-reactor..."
    
    if [[ ! -f "$INSTALL_PATH" ]]; then
        log_info "claude-reactor is not installed in system PATH"
        return 0
    fi
    
    if ! rm -f "$INSTALL_PATH"; then
        log_error "Failed to remove $INSTALL_PATH"
        return 1
    fi
    
    log_success "claude-reactor uninstalled successfully!"
    log_info "Your local binary at $SCRIPT_DIR/claude-reactor is still available"
    return 0
}

# Show usage
show_usage() {
    cat << 'EOF'
INSTALL - Claude-Reactor Installation Script

USAGE:
    ./INSTALL                    Install claude-reactor (auto-detects best method)
    ./INSTALL --local            Install to ~/bin (recommended for macOS)
    ./INSTALL --system           Install to /usr/local/bin (requires sudo)
    ./INSTALL --uninstall        Remove claude-reactor from system PATH
    ./INSTALL --help             Show this help message

DESCRIPTION:
    This script installs claude-reactor for global access.
    
    AUTO-DETECTION:
    - macOS: Uses local installation (~/bin) to avoid security issues
    - Linux: Uses system installation (/usr/local/bin)
    
    SYSTEM INSTALLATION (/usr/local/bin):
    - Requires sudo permissions
    - May have security restrictions on macOS
    - Good for Linux and server environments
    
    LOCAL INSTALLATION (~/bin) - Recommended for macOS:
    - No sudo required
    - Avoids macOS Gatekeeper security restrictions  
    - Creates ~/bin if it doesn't exist
    - Provides PATH setup instructions
    
    After installation, you can use claude-reactor from anywhere:
        claude-reactor --help
        claude-reactor run --image go
        
REQUIREMENTS:
    - Pre-built binaries in dist/ directory (run: make go-build-all)
    - Write permissions to /usr/local/bin (may require sudo)

SUPPORTED PLATFORMS:
    - Linux: x86_64, arm64
    - macOS: x86_64, arm64 (Apple Silicon)
    
EXAMPLES:
    # Build and auto-install (recommended)
    make build && ./INSTALL
    
    # macOS local install (recommended)
    make build && ./INSTALL --local
    
    # Linux/server system install
    make build && ./INSTALL --system
    
    # Remove installation  
    ./INSTALL --uninstall
EOF
}

# Main installation logic
main() {
    # Parse arguments
    local local_install=false
    local install_path="$INSTALL_PATH"
    
    case "${1:-}" in
        --help|-h)
            show_usage
            exit 0
            ;;
        --uninstall|-u)
            uninstall
            exit $?
            ;;
        --local|-l)
            local_install=true
            install_path="$LOCAL_INSTALL_PATH"
            log_info "Using local installation path: $install_path"
            ;;
        --system|-s)
            local_install=false
            install_path="$INSTALL_PATH"
            log_info "Using system installation path: $install_path"
            ;;
        "")
            # Auto-detect best installation method
            if [[ "$(detect_os)" == "darwin" ]]; then
                local_install=true
                install_path="$LOCAL_INSTALL_PATH"
                log_info "üçé macOS detected - using local installation to avoid security issues"
                log_info "Using path: $install_path"
            else
                local_install=false  
                install_path="$INSTALL_PATH"
                log_info "üêß Linux detected - using system installation"
                log_info "Using path: $install_path"
            fi
            ;;
        *)
            log_error "Unknown argument: $1"
            log_info "Use ./INSTALL --help for usage information"
            exit 1
            ;;
    esac
    
    log_info "üöÄ Claude-Reactor Installation"
    log_info "Detected platform: $(detect_os)/$(detect_architecture)"
    
    # Find the binary
    local binary_path
    if ! binary_path=$(find_binary); then
        exit 1
    fi
    
    log_success "Found binary: $binary_path"
    
    # Check permissions (skip for local install)
    if [[ "$local_install" == "false" ]] && ! check_permissions; then
        exit 1
    fi
    
    # Perform installation
    if ! copy_binary "$binary_path" "$install_path" "$local_install"; then
        exit 1
    fi
    
    # Verify installation
    if ! verify_installation "$install_path"; then
        exit 1
    fi
    
    log_success "‚úÖ claude-reactor installed successfully!"
    log_info ""
    
    if [[ "$local_install" == "true" ]]; then
        log_info "Local installation completed in ~/bin"
        log_info ""
        # Check if ~/bin is in PATH
        if [[ ":$PATH:" != *":$HOME/bin:"* ]]; then
            log_warning "~/bin is not in your PATH"
            log_info ""  
            log_info "üìù To add ~/bin to your PATH permanently:"
            log_info "  echo 'export PATH=\"\$HOME/bin:\$PATH\"' >> ~/.zshrc   # For zsh"
            log_info "  echo 'export PATH=\"\$HOME/bin:\$PATH\"' >> ~/.bashrc  # For bash"
            log_info "  source ~/.zshrc  # or ~/.bashrc"
            log_info ""
            log_info "üöÄ Then use globally:"
            log_info "  claude-reactor --help"
            log_info ""
            log_info "üí° Or run directly without PATH setup:"
            log_info "  ~/bin/claude-reactor --help"
        else
            log_info "‚úÖ ~/bin is already in your PATH"
            log_info "You can now use claude-reactor from anywhere:"
            log_info "  claude-reactor --help"
            log_info "  claude-reactor run --image go"
        fi
    else
        log_info "You can now use claude-reactor from anywhere:"
        log_info "  claude-reactor --help"
        log_info "  claude-reactor run --image go"
        log_info "  claude-reactor config show"
        log_info ""
        log_info "To uninstall: ./INSTALL --uninstall"
    fi
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi